generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OrganizationWallet {
  id Int @id @default(autoincrement())

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int          @map("organization_id")

  chain   String
  chainId Int    @map("chain_id")
  address String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("organization_wallets")
}

model Organization {
  id Int @id @default(autoincrement())

  name            String
  profileImageUrl String? @map("profile_image_url")
  bannerImageUrl  String? @map("banner_image_url")

  projects Project[]
  wallets  OrganizationWallet[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("organizations")
}

model ProjectDonationWallet {
  id Int @id @default(autoincrement())

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int     @map("project_id")

  chain   String
  chainId Int    @map("chain_id")
  address String

  transaction Transaction[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_donation_wallets")
}

enum SocialProfilePlatform {
  TWITTER
  INSTAGRAM
  LINKEDIN
}

model ProjectSocialProfile {
  id Int @id @default(autoincrement())

  platform   SocialProfilePlatform
  profileUrl String                @map("profile_url")

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int     @map("project_id")

  @@map("project_social_profiles")
}

model ProjectCredentials {
  id Int @id @default(autoincrement())

  statement     String
  credentialUrl String @map("credential_url")

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int     @map("project_id")

  @@map("project_credentials")
}

model ProjectCategory {
  id Int @id @default(autoincrement())

  category String

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int     @map("project_id")

  @@map("project_categories")
}

model ProjectPartner {
  id Int @id @default(autoincrement())

  name       String
  websiteUrl String @map("website_url")

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int     @map("project_id")

  @@map("project_partners")
}

model Project {
  id Int @id @default(autoincrement())

  owner   Organization @relation(fields: [ownerId], references: [id])
  ownerId Int          @map("owner_id")

  name        String
  description String
  summary     String
  website     String

  logoImageUrl   String? @map("logo_image_url")
  bannerImageUrl String? @map("banner_image_url")

  impactLocation String? @map("impact_location")

  donationWallets ProjectDonationWallet[]
  socialProfiles  ProjectSocialProfile[]
  credentials     ProjectCredentials[]
  categories      ProjectCategory[]
  partners        ProjectPartner[]
  transactions    Transaction[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAIL
}

model Transaction {
  id Int @id @default(autoincrement())

  transactionHash String @map("transaction_hash")

  fromWallet String @map("from_wallet")

  toWallet   ProjectDonationWallet @relation(fields: [toWalletId], references: [id])
  toWalletId Int                   @map("to_wallet_id")

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int     @map("project_id")

  token  String
  amount String
  status TransactionStatus @default(PENDING)

  createdAt   DateTime  @default(now()) @map("created_at")
  completedAt DateTime? @map("completed_at")

  @@unique([transactionHash])
  @@map("transactions")
}
